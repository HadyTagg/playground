 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/main.py b/main.py
index 6956172c927afd27bae9f4e311b5c25b612f594d..9c183722f88808970c1308987da57ef261675840 100644
--- a/main.py
+++ b/main.py
@@ -95,65 +95,61 @@ while running:
         next_y = floor.top - player.height
         player_vel_y = 0
         on_ground = True
 
     # Apply gravity and move
     player_vel_y += gravity
     player.y = next_y
 
     # Update camera
     if player.y < HEIGHT // 2:
         camera_scroll = HEIGHT // 2 - player.y
         player.y = HEIGHT // 2
         camera_offset += camera_scroll
         for plat in platforms:
             plat.y += camera_scroll
         floor.y += camera_scroll
         last_y += camera_scroll
         highest_platform_y += camera_scroll
 
     # Generate new platforms if needed
     buffer_above_screen = 2 * HEIGHT
     skipped_height = 0
     while last_y > -(camera_offset + buffer_above_screen):
         remaining_gap = max_platform_gap - skipped_height
 
-        # Ensure we never exceed the max gap
+        # Ensure the cumulative gap never exceeds the maximum
         if remaining_gap <= min_platform_gap:
-            dy = min_platform_gap
+            dy = remaining_gap
         else:
             dy = random.randint(min_platform_gap, remaining_gap)
 
         y = last_y - dy
         skipped_height += dy
 
         must_place = skipped_height >= max_platform_gap or random.random() < 1.0 / platform_density_factor
 
         if must_place or remaining_gap <= min_platform_gap:
             dx = random.randint(-max_horizontal_reach, max_horizontal_reach)
             x = max(0, min(WIDTH - platform_width, last_x + dx))
             platforms.append(pygame.Rect(x, y, platform_width, platform_height))
             last_x, last_y = x, y
             highest_platform_y = min(highest_platform_y, y)
             skipped_height = 0
         else:
+            # No platform placed here, just move upward
             last_y = y
-            highest_platform_y = min(highest_platform_y, y)
-            skipped_height = 0
-        else:
-            last_y = y
-            highest_platform_y = min(highest_platform_y, y)
 
     # Draw everything
     screen.fill(WHITE)
     pygame.draw.rect(screen, GREEN, floor)
     for plat in platforms:
         pygame.draw.rect(screen, GREEN, plat)
         pygame.draw.line(screen, RED, (plat.left, plat.top), (plat.right, plat.top), 2)
     pygame.draw.rect(screen, BLUE, player)
     pygame.draw.line(screen, RED, (player.left, player.bottom), (player.right, player.bottom), 2)
 
     pygame.display.flip()
 
 pygame.quit()
 sys.exit()
 
 
EOF
)
